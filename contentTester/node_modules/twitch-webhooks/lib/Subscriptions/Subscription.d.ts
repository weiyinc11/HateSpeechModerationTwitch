import type { HelixResponse, HelixWebHookHubRequestOptions } from 'twitch';
import type { WebHookListener } from '../WebHookListener';
/** @private */
export declare type SubscriptionResultType<T extends Subscription> = T extends Subscription<infer O> ? O : never;
/**
 * @hideProtected
 */
export declare abstract class Subscription</** @private */ T = any> {
    protected readonly _handler: (obj: T) => void;
    protected readonly _client: WebHookListener;
    private readonly _validityInSeconds;
    private _verified;
    protected _secret?: string;
    private _refreshTimer?;
    private _unsubscribeResolver?;
    /** @private */
    protected constructor(_handler: (obj: T) => void, _client: WebHookListener, _validityInSeconds?: number);
    /**
     * Whether the subscription has been verified by Twitch.
     */
    get verified(): boolean;
    /** @private */
    _verify(): void;
    /** @private */
    _generateNewCredentials(): void;
    /** @private */
    _handleData(data: string, algoAndSignature: string): boolean;
    /** @private */
    _handleUnsubscribe(): boolean;
    /**
     * Activates the subscription.
     */
    start(): Promise<void>;
    /**
     * Suspends the subscription, not removing it from the listener.
     */
    suspend(): Promise<void>;
    /**
     * Deactivates the subscription and removes it from the listener.
     */
    stop(): Promise<void>;
    protected _getOptions(): Promise<HelixWebHookHubRequestOptions>;
    /** @private */
    abstract get id(): string;
    protected abstract _subscribe(): Promise<void>;
    protected abstract _unsubscribe(): Promise<void>;
    protected abstract transformData(response: HelixResponse<unknown>): T;
    private _createNewSubscription;
}
