"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyAdapter = void 0;
var tslib_1 = require("tslib");
var portfinder_1 = require("@d-fischer/portfinder");
var public_ip_1 = require("@d-fischer/public-ip");
var twitch_common_1 = require("twitch-common");
var ConnectionAdapter_1 = require("./ConnectionAdapter");
/**
 * A WebHook connection adapter to support the "old style" options.
 *
 * @deprecated Use literally *any* other connection adapter instead.
 * @hideProtected
 */
var LegacyAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(LegacyAdapter, _super);
    /** @private */
    function LegacyAdapter(_config) {
        var _this = _super.call(this, _config) || this;
        _this._config = _config;
        return _this;
    }
    LegacyAdapter_1 = LegacyAdapter;
    /**
     * Takes the legacy WebHookListenerConfig and creates a connection adapter from it.
     *
     * @expandParams
     */
    LegacyAdapter.create = function (config) {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var listenerPort, _e, reverseProxy, _f, _g;
            var _h;
            return tslib_1.__generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        if (!((_a = config.port) !== null && _a !== void 0)) return [3 /*break*/, 1];
                        _e = _a;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, portfinder_1.getPortPromise()];
                    case 2:
                        _e = (_j.sent());
                        _j.label = 3;
                    case 3:
                        listenerPort = _e;
                        reverseProxy = (_b = config.reverseProxy) !== null && _b !== void 0 ? _b : {};
                        _f = LegacyAdapter_1.bind;
                        _h = {};
                        if (!((_c = config.hostName) !== null && _c !== void 0)) return [3 /*break*/, 4];
                        _g = _c;
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, public_ip_1.v4()];
                    case 5:
                        _g = (_j.sent());
                        _j.label = 6;
                    case 6: return [2 /*return*/, new (_f.apply(LegacyAdapter_1, [void 0, (_h.hostName = _g,
                                _h.listenerPort = listenerPort,
                                _h.sslCert = config.ssl,
                                _h.connectUsingSsl = reverseProxy.ssl === undefined ? !!config.ssl : reverseProxy.ssl,
                                _h.externalPort = (_d = reverseProxy.port) !== null && _d !== void 0 ? _d : listenerPort,
                                _h.pathPrefix = reverseProxy.pathPrefix,
                                _h)]))()];
                }
            });
        });
    };
    Object.defineProperty(LegacyAdapter.prototype, "connectUsingSsl", {
        /** @protected */
        get: function () {
            return this._config.connectUsingSsl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LegacyAdapter.prototype, "pathPrefix", {
        /** @protected */
        get: function () {
            return this._config.pathPrefix;
        },
        enumerable: false,
        configurable: true
    });
    /** @protected */
    LegacyAdapter.prototype.getExternalPort = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._config.externalPort];
            });
        });
    };
    /** @protected */
    LegacyAdapter.prototype.getHostName = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._config.hostName];
            });
        });
    };
    var LegacyAdapter_1;
    LegacyAdapter = LegacyAdapter_1 = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-webhooks', 'LegacyAdapter')
    ], LegacyAdapter);
    return LegacyAdapter;
}(ConnectionAdapter_1.ConnectionAdapter));
exports.LegacyAdapter = LegacyAdapter;
