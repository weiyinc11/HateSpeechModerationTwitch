import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { rtfm } from 'twitch-common';
import { ConnectionAdapter } from "./ConnectionAdapter.mjs";
/**
 * A WebHook connection adapter that supports a reverse proxy in front of the listener.
 *
 * @hideProtected
 */
var ReverseProxyAdapter = /** @class */ (function (_super) {
    __extends(ReverseProxyAdapter, _super);
    /**
     * Creates a reverse proxy connection adapter.
     *
     * @expandParams
     *
     * @param options
     */
    function ReverseProxyAdapter(options) {
        var _a, _b;
        var _this = _super.call(this, options) || this;
        _this._hostName = options.hostName;
        _this._connectUsingSsl = (_a = options.ssl) !== null && _a !== void 0 ? _a : true;
        _this._port = (_b = options.port) !== null && _b !== void 0 ? _b : (_this._connectUsingSsl ? 443 : 80);
        _this._pathPrefix = options.pathPrefix;
        return _this;
    }
    Object.defineProperty(ReverseProxyAdapter.prototype, "connectUsingSsl", {
        /** @protected */
        get: function () {
            return this._connectUsingSsl;
        },
        enumerable: false,
        configurable: true
    });
    /** @protected */
    ReverseProxyAdapter.prototype.getExternalPort = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._port];
            });
        });
    };
    /** @protected */
    ReverseProxyAdapter.prototype.getHostName = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._hostName];
            });
        });
    };
    Object.defineProperty(ReverseProxyAdapter.prototype, "pathPrefix", {
        /** @protected */
        get: function () {
            return this._pathPrefix;
        },
        enumerable: false,
        configurable: true
    });
    ReverseProxyAdapter = __decorate([
        rtfm('twitch-webhooks', 'ReverseProxyAdapter')
    ], ReverseProxyAdapter);
    return ReverseProxyAdapter;
}(ConnectionAdapter));
export { ReverseProxyAdapter };
