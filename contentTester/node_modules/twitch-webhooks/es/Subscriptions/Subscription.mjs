import { __awaiter, __decorate, __generator, __read } from "tslib";
import generateRandomString from '@d-fischer/randomstring';
import * as crypto from 'crypto';
import { rtfm } from 'twitch-common';
/**
 * @hideProtected
 */
var Subscription = /** @class */ (function () {
    /** @private */
    function Subscription(_handler, _client, _validityInSeconds) {
        if (_validityInSeconds === void 0) { _validityInSeconds = 100000; }
        this._handler = _handler;
        this._client = _client;
        this._validityInSeconds = _validityInSeconds;
        this._verified = false;
    }
    Object.defineProperty(Subscription.prototype, "verified", {
        /**
         * Whether the subscription has been verified by Twitch.
         */
        get: function () {
            return this._verified;
        },
        enumerable: false,
        configurable: true
    });
    /** @private */
    Subscription.prototype._verify = function () {
        this._verified = true;
    };
    /** @private */
    Subscription.prototype._generateNewCredentials = function () {
        this._secret = generateRandomString(16);
    };
    /** @private */
    Subscription.prototype._handleData = function (data, algoAndSignature) {
        var _a = __read(algoAndSignature.split('=', 2), 2), algorithm = _a[0], signature = _a[1];
        var hash = crypto.createHmac(algorithm, this._secret).update(data).digest('hex');
        if (hash === signature) {
            this._handler(this.transformData(JSON.parse(data)));
            return true;
        }
        return false;
    };
    /** @private */
    Subscription.prototype._handleUnsubscribe = function () {
        if (this._unsubscribeResolver) {
            this._unsubscribeResolver();
            this._unsubscribeResolver = undefined;
            return true;
        }
        return false;
    };
    /**
     * Activates the subscription.
     */
    Subscription.prototype.start = function () {
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._refreshTimer) {
                            clearInterval(this._refreshTimer);
                        }
                        return [4 /*yield*/, this._createNewSubscription()];
                    case 1:
                        _a.sent();
                        this._refreshTimer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._createNewSubscription()];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, this._validityInSeconds * 800); // refresh a little bit faster than we could theoretically make work, but in millis
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Suspends the subscription, not removing it from the listener.
     */
    Subscription.prototype.suspend = function () {
        return __awaiter(this, void 0, Promise, function () {
            var unsubscribePromise;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._refreshTimer) {
                            clearInterval(this._refreshTimer);
                            this._refreshTimer = undefined;
                        }
                        unsubscribePromise = new Promise(function (resolve) { return (_this._unsubscribeResolver = resolve); });
                        return [4 /*yield*/, this._unsubscribe()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, unsubscribePromise];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deactivates the subscription and removes it from the listener.
     */
    Subscription.prototype.stop = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suspend()];
                    case 1:
                        _a.sent();
                        this._client._dropSubscription(this.id);
                        return [2 /*return*/];
                }
            });
        });
    };
    Subscription.prototype._getOptions = function () {
        return __awaiter(this, void 0, Promise, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this._client._buildHookUrl(this.id)];
                    case 1: return [2 /*return*/, (_a.callbackUrl = _b.sent(),
                            _a.secret = this._secret,
                            _a.validityInSeconds = this._validityInSeconds,
                            _a)];
                }
            });
        });
    };
    Subscription.prototype._createNewSubscription = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._generateNewCredentials();
                        return [4 /*yield*/, this._subscribe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Subscription = __decorate([
        rtfm('twitch-webhooks', 'Subscription')
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ], Subscription);
    return Subscription;
}());
export { Subscription };
