import { __decorate } from "tslib";
import { createLogger } from '@d-fischer/logger';
import { Enumerable } from '@d-fischer/shared-utils';
import { EventEmitter } from '@d-fischer/typed-event-emitter';
import { extractUserId } from '@twurple/api';
import { rtfm } from '@twurple/common';
import { EventSubChannelBanSubscription } from "./subscriptions/EventSubChannelBanSubscription.mjs";
import { EventSubChannelCharityCampaignProgressSubscription } from "./subscriptions/EventSubChannelCharityCampaignProgressSubscription.mjs";
import { EventSubChannelCharityCampaignStartSubscription } from "./subscriptions/EventSubChannelCharityCampaignStartSubscription.mjs";
import { EventSubChannelCharityCampaignStopSubscription } from "./subscriptions/EventSubChannelCharityCampaignStopSubscription.mjs";
import { EventSubChannelCharityDonationSubscription } from "./subscriptions/EventSubChannelCharityDonationSubscription.mjs";
import { EventSubChannelCheerSubscription } from "./subscriptions/EventSubChannelCheerSubscription.mjs";
import { EventSubChannelFollowSubscription } from "./subscriptions/EventSubChannelFollowSubscription.mjs";
import { EventSubChannelGoalBeginSubscription } from "./subscriptions/EventSubChannelGoalBeginSubscription.mjs";
import { EventSubChannelGoalEndSubscription } from "./subscriptions/EventSubChannelGoalEndSubscription.mjs";
import { EventSubChannelGoalProgressSubscription } from "./subscriptions/EventSubChannelGoalProgressSubscription.mjs";
import { EventSubChannelHypeTrainBeginSubscription } from "./subscriptions/EventSubChannelHypeTrainBeginSubscription.mjs";
import { EventSubChannelHypeTrainEndSubscription } from "./subscriptions/EventSubChannelHypeTrainEndSubscription.mjs";
import { EventSubChannelHypeTrainProgressSubscription } from "./subscriptions/EventSubChannelHypeTrainProgressSubscription.mjs";
import { EventSubChannelModeratorAddSubscription } from "./subscriptions/EventSubChannelModeratorAddSubscription.mjs";
import { EventSubChannelModeratorRemoveSubscription } from "./subscriptions/EventSubChannelModeratorRemoveSubscription.mjs";
import { EventSubChannelPollBeginSubscription } from "./subscriptions/EventSubChannelPollBeginSubscription.mjs";
import { EventSubChannelPollEndSubscription } from "./subscriptions/EventSubChannelPollEndSubscription.mjs";
import { EventSubChannelPollProgressSubscription } from "./subscriptions/EventSubChannelPollProgressSubscription.mjs";
import { EventSubChannelPredictionBeginSubscription } from "./subscriptions/EventSubChannelPredictionBeginSubscription.mjs";
import { EventSubChannelPredictionEndSubscription } from "./subscriptions/EventSubChannelPredictionEndSubscription.mjs";
import { EventSubChannelPredictionLockSubscription } from "./subscriptions/EventSubChannelPredictionLockSubscription.mjs";
import { EventSubChannelPredictionProgressSubscription } from "./subscriptions/EventSubChannelPredictionProgressSubscription.mjs";
import { EventSubChannelRaidSubscription } from "./subscriptions/EventSubChannelRaidSubscription.mjs";
import { EventSubChannelRedemptionAddSubscription } from "./subscriptions/EventSubChannelRedemptionAddSubscription.mjs";
import { EventSubChannelRedemptionUpdateSubscription } from "./subscriptions/EventSubChannelRedemptionUpdateSubscription.mjs";
import { EventSubChannelRewardAddSubscription } from "./subscriptions/EventSubChannelRewardAddSubscription.mjs";
import { EventSubChannelRewardRemoveSubscription } from "./subscriptions/EventSubChannelRewardRemoveSubscription.mjs";
import { EventSubChannelRewardUpdateSubscription } from "./subscriptions/EventSubChannelRewardUpdateSubscription.mjs";
import { EventSubChannelShieldModeBeginSubscription } from "./subscriptions/EventSubChannelShieldModeBeginSubscription.mjs";
import { EventSubChannelShieldModeEndSubscription } from "./subscriptions/EventSubChannelShieldModeEndSubscription.mjs";
import { EventSubChannelSubscriptionEndSubscription } from "./subscriptions/EventSubChannelSubscriptionEndSubscription.mjs";
import { EventSubChannelSubscriptionGiftSubscription } from "./subscriptions/EventSubChannelSubscriptionGiftSubscription.mjs";
import { EventSubChannelSubscriptionMessageSubscription } from "./subscriptions/EventSubChannelSubscriptionMessageSubscription.mjs";
import { EventSubChannelSubscriptionSubscription } from "./subscriptions/EventSubChannelSubscriptionSubscription.mjs";
import { EventSubChannelUnbanSubscription } from "./subscriptions/EventSubChannelUnbanSubscription.mjs";
import { EventSubChannelUpdateSubscription } from "./subscriptions/EventSubChannelUpdateSubscription.mjs";
import { EventSubExtensionBitsTransactionCreateSubscription } from "./subscriptions/EventSubExtensionBitsTransactionCreateSubscription.mjs";
import { EventSubStreamOfflineSubscription } from "./subscriptions/EventSubStreamOfflineSubscription.mjs";
import { EventSubStreamOnlineSubscription } from "./subscriptions/EventSubStreamOnlineSubscription.mjs";
import { EventSubUserAuthorizationGrantSubscription } from "./subscriptions/EventSubUserAuthorizationGrantSubscription.mjs";
import { EventSubUserAuthorizationRevokeSubscription } from "./subscriptions/EventSubUserAuthorizationRevokeSubscription.mjs";
import { EventSubUserUpdateSubscription } from "./subscriptions/EventSubUserUpdateSubscription.mjs";
const numberRegex = /^\d+$/;
/**
 * @private
 * @hideProtected
 */
let EventSubBase = class EventSubBase extends EventEmitter {
    constructor(config) {
        super();
        this._subscriptions = new Map();
        this._subscriptionsByTwitchId = new Map();
        this._twitchSubscriptions = new Map();
        /**
         * Fires when a subscription is revoked.
         *
         * @eventListener
         *
         * @param subscription The subscription that was revoked.
         */
        this.onRevoke = this.registerEvent();
        this._readyToSubscribe = false;
        this._apiClient = config.apiClient;
        this._logger = createLogger({
            name: 'twurple:eventsub',
            emoji: true,
            ...config.logger
        });
    }
    /** @private */
    _dropSubscription(id) {
        this._subscriptions.delete(id);
    }
    /** @private */
    _dropTwitchSubscription(id) {
        if (this._twitchSubscriptions.has(id)) {
            const data = this._twitchSubscriptions.get(id);
            this._twitchSubscriptions.delete(id);
            this._subscriptionsByTwitchId.delete(data.id);
        }
    }
    /** @private */
    _registerTwitchSubscription(subscription, data) {
        this._twitchSubscriptions.set(subscription.id, data);
        this._subscriptionsByTwitchId.set(data.id, subscription);
    }
    /**
     * Subscribes to events representing a stream going live.
     *
     * @param user The user for which to get notifications about their streams going live.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToStreamOnlineEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToStreamOnlineEvents');
        return await this._genericSubscribe(EventSubStreamOnlineSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events representing a stream going offline.
     *
     * @param user The user for which to get notifications about their streams going offline.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToStreamOfflineEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToStreamOfflineEvents');
        return await this._genericSubscribe(EventSubStreamOfflineSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events representing a change in channel metadata, e.g. stream title or category.
     *
     * @param user The user for which to get notifications about updates.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelUpdateEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelUpdateEvents');
        return await this._genericSubscribe(EventSubChannelUpdateSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user following a channel.
     *
     * @param user The user for which to get notifications about their followers.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelFollowEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelFollowEvents');
        return await this._genericSubscribe(EventSubChannelFollowSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user subscribing to a channel.
     *
     * @param user The user for which to get notifications for about their subscribers.
     * @param handler  The function that will be called for any new notifications.
     */
    async subscribeToChannelSubscriptionEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelSubscriptionEvents');
        return await this._genericSubscribe(EventSubChannelSubscriptionSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user gifting a subscription to a channel to someone else.
     *
     * @param user The user for which to get notifications for about subscriptions people gift in their channel.
     * @param handler  The function that will be called for any new notifications.
     */
    async subscribeToChannelSubscriptionGiftEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelSubscriptionGiftEvents');
        return await this._genericSubscribe(EventSubChannelSubscriptionGiftSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user's subscription to a channel being announced.
     *
     * @param user The user for which to get notifications for about announced subscriptions.
     * @param handler  The function that will be called for any new notifications.
     */
    async subscribeToChannelSubscriptionMessageEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelSubscriptionMessageEvents');
        return await this._genericSubscribe(EventSubChannelSubscriptionMessageSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user's subscription to a channel ending.
     *
     * @param user The user for which to get notifications for about ending subscriptions.
     * @param handler  The function that will be called for any new notifications.
     */
    async subscribeToChannelSubscriptionEndEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelSubscriptionEndEvents');
        return await this._genericSubscribe(EventSubChannelSubscriptionEndSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user cheering some bits.
     *
     * @param user The user for which to get notifications for about cheers they get.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelCheerEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelCheerEvents');
        return await this._genericSubscribe(EventSubChannelCheerSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a charity campaign starting in a channel.
     *
     * @param user The user for which to get notifications about charity campaigns starting.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelCharityCampaignStartEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelCharityCampaignStartEvents');
        return await this._genericSubscribe(EventSubChannelCharityCampaignStartSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a charity campaign ending in a channel.
     *
     * @param user The user for which to get notifications about charity campaigns ending.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelCharityCampaignStopEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelCharityCampaignStopEvents');
        return await this._genericSubscribe(EventSubChannelCharityCampaignStopSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a donation to a charity campaign in a channel.
     *
     * @param user The user for which to get notifications about charity campaign donations.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelCharityDonationEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelCharityDonationEvents');
        return await this._genericSubscribe(EventSubChannelCharityDonationSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent progress in a charity campaign in a channel.
     *
     * @param user The user for which to get notifications about charity campaign progress.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelCharityCampaignProgressEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelCharityCampaignProgressEvents');
        return await this._genericSubscribe(EventSubChannelCharityCampaignProgressSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user getting banned from a channel.
     *
     * @param user The user for which to get notifications for when users get banned in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelBanEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelBanEvents');
        return await this._genericSubscribe(EventSubChannelBanSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user getting unbanned from a channel.
     *
     * @param user The user for which to get notifications for when users get unbanned in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelUnbanEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelUnbanEvents');
        return await this._genericSubscribe(EventSubChannelUnbanSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent Shield Mode being activated in a channel.
     *
     * @param broadcaster The user for which to get notifications for when Shield Mode is activated in their channel.
     * @param moderator A user that has permission to read Shield Mode status in the broadcaster's channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelShieldModeBeginEvents(broadcaster, moderator, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(broadcaster, 'subscribeToChannelShieldModeStartEvents');
        const moderatorId = this._extractUserIdWithNumericWarning(moderator, 'subscribeToChannelShieldModeStartEvents');
        return await this._genericSubscribe(EventSubChannelShieldModeBeginSubscription, handler, this, broadcasterId, moderatorId);
    }
    /**
     * Subscribes to events that represent Shield Mode being deactivated in a channel.
     *
     * @param broadcaster The user for which to get notifications for when Shield Mode is deactivated in their channel.
     * @param moderator A user that has permission to read Shield Mode status in the broadcaster's channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelShieldModeEndEvents(broadcaster, moderator, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(broadcaster, 'subscribeToChannelShieldModeEndEvents');
        const moderatorId = this._extractUserIdWithNumericWarning(moderator, 'subscribeToChannelShieldModeEndEvents');
        return await this._genericSubscribe(EventSubChannelShieldModeEndSubscription, handler, this, broadcasterId, moderatorId);
    }
    /**
     * Subscribes to events that represent a user getting moderator permissions in a channel.
     *
     * @param user The user for which to get notifications for when users get moderator permissions in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelModeratorAddEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelModeratorAddEvents');
        return await this._genericSubscribe(EventSubChannelModeratorAddSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a user losing moderator permissions in a channel.
     *
     * @param user The user for which to get notifications for when users lose moderator permissions in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelModeratorRemoveEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelModeratorRemoveEvents');
        return await this._genericSubscribe(EventSubChannelModeratorRemoveSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a broadcaster raiding another broadcaster.
     *
     * @param user The broadcaster for which to get outgoing raid notifications.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRaidEventsFrom(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelRaidEventsFrom');
        return await this._genericSubscribe(EventSubChannelRaidSubscription, handler, this, userId, 'from');
    }
    /**
     * Subscribes to events that represent a broadcaster being raided by another broadcaster.
     *
     * @param user The broadcaster for which to get incoming raid notifications.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRaidEventsTo(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelRaidEventsTo');
        return await this._genericSubscribe(EventSubChannelRaidSubscription, handler, this, userId, 'to');
    }
    /**
     * Subscribes to events that represent a Channel Points reward being added to a channel.
     *
     * @param user The user for which to get notifications for when they add a reward to their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRewardAddEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelRewardAddEvents');
        return await this._genericSubscribe(EventSubChannelRewardAddSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a Channel Points reward being updated.
     *
     * @param user The user for which to get notifications for when they update a reward.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRewardUpdateEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToRewardUpdateEvents');
        return await this._genericSubscribe(EventSubChannelRewardUpdateSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a specific Channel Points reward being updated.
     *
     * @param user The user for which to get notifications for when they update the reward.
     * @param rewardId The ID of the reward for which to get notifications when it is updated.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRewardUpdateEventsForReward(user, rewardId, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToRewardUpdateEvents');
        return await this._genericSubscribe(EventSubChannelRewardUpdateSubscription, handler, this, userId, rewardId);
    }
    /**
     * Subscribes to events that represent a Channel Points reward being removed.
     *
     * @param user The user for which to get notifications for when they remove a reward.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRewardRemoveEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToRewardRemoveEvents');
        return await this._genericSubscribe(EventSubChannelRewardRemoveSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a specific Channel Points reward being removed.
     *
     * @param user The user for which to get notifications for when they remove the reward.
     * @param rewardId The ID of the reward to get notifications for when it is removed.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRewardRemoveEventsForReward(user, rewardId, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToRewardRemoveEventsForReward');
        return await this._genericSubscribe(EventSubChannelRewardRemoveSubscription, handler, this, userId, rewardId);
    }
    /**
     * Subscribes to events that represents a Channel Points reward being redeemed.
     *
     * @param user The user for which to get notifications for when their rewards are redeemed.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRedemptionAddEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelRedemptionEvents');
        return await this._genericSubscribe(EventSubChannelRedemptionAddSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a specific Channel Points reward being redeemed.
     *
     * @param user The user for which to get notifications when their reward is redeemed.
     * @param rewardId The ID of the reward for which to get notifications when it is redeemed.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRedemptionAddEventsForReward(user, rewardId, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToRedemptionAddEventsForReward');
        return await this._genericSubscribe(EventSubChannelRedemptionAddSubscription, handler, this, userId, rewardId);
    }
    /**
     * Subscribes to events that represent a Channel Points reward being updated by a broadcaster.
     *
     * @param user The user for which to get notifications for when they update a reward.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRedemptionUpdateEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelRedemptionUpdateEvents');
        return await this._genericSubscribe(EventSubChannelRedemptionUpdateSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a specific Channel Points reward being updated by a broadcaster.
     *
     * @param user The user for which to get notifications for when they update the reward.
     * @param rewardId The ID of the reward for which to get notifications when it gets updated.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelRedemptionUpdateEventsForReward(user, rewardId, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelRedemptionUpdateEventsForReward');
        return await this._genericSubscribe(EventSubChannelRedemptionUpdateSubscription, handler, this, userId, rewardId);
    }
    /**
     * Subscribes to events that represent a poll starting in a channel.
     *
     * @param user The broadcaster for which to receive poll begin events.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelPollBeginEvents(user, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelPollBeginEvents');
        return await this._genericSubscribe(EventSubChannelPollBeginSubscription, handler, this, broadcasterId);
    }
    /**
     * Subscribes to events that represent a poll being voted on in a channel.
     *
     * @param user The broadcaster for which to receive poll progress events.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelPollProgressEvents(user, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelPollProgressEvents');
        return await this._genericSubscribe(EventSubChannelPollProgressSubscription, handler, this, broadcasterId);
    }
    /**
     * Subscribes to events that represent a poll ending in a channel.
     *
     * @param user The broadcaster for which to receive poll end events.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelPollEndEvents(user, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelPollEndEvents');
        return await this._genericSubscribe(EventSubChannelPollEndSubscription, handler, this, broadcasterId);
    }
    /**
     * Subscribes to events that represent a prediction starting in a channel.
     *
     * @param user The broadcaster for which to receive prediction begin events.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelPredictionBeginEvents(user, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelPredictionBeginEvents');
        return await this._genericSubscribe(EventSubChannelPredictionBeginSubscription, handler, this, broadcasterId);
    }
    /**
     * Subscribes to events that represent a prediction being voted on in a channel.
     *
     * @param user The broadcaster for which to receive prediction progress events.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelPredictionProgressEvents(user, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelPredictionProgressEvents');
        return await this._genericSubscribe(EventSubChannelPredictionProgressSubscription, handler, this, broadcasterId);
    }
    /**
     * Subscribes to events that represent a prediction being locked in a channel.
     *
     * @param user The broadcaster for which to receive prediction lock events.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelPredictionLockEvents(user, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelPredictionLockEvents');
        return await this._genericSubscribe(EventSubChannelPredictionLockSubscription, handler, this, broadcasterId);
    }
    /**
     * Subscribes to events that represent a prediction ending in a channel.
     *
     * @param user The broadcaster for which to receive prediction end events.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelPredictionEndEvents(user, handler) {
        const broadcasterId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelPredictionEndEvents');
        return await this._genericSubscribe(EventSubChannelPredictionEndSubscription, handler, this, broadcasterId);
    }
    /**
     * Subscribes to events that represent a Goal beginning.
     *
     * @param user The user for which to get notifications about Goals in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelGoalBeginEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelGoalBeginEvents');
        return await this._genericSubscribe(EventSubChannelGoalBeginSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent progress in a Goal in a channel.
     *
     * @param user The user for which to get notifications about Goals in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelGoalProgressEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelGoalProgressEvents');
        return await this._genericSubscribe(EventSubChannelGoalProgressSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent the end of a Goal in a channel.
     *
     * @param user The user for which to get notifications about Goals in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelGoalEndEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelGoalEndEvents');
        return await this._genericSubscribe(EventSubChannelGoalEndSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a Hype Train beginning.
     *
     * @param user The user for which to get notifications about Hype Trains in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelHypeTrainBeginEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelHypeTrainBeginEvents');
        return await this._genericSubscribe(EventSubChannelHypeTrainBeginSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent progress in a Hype Train in a channel.
     *
     * @param user The user for which to get notifications about Hype Trains in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelHypeTrainProgressEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelHypeTrainProgressEvents');
        return await this._genericSubscribe(EventSubChannelHypeTrainProgressSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent the end of a Hype Train in a channel.
     *
     * @param user The user for which to get notifications about Hype Trains in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToChannelHypeTrainEndEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToChannelHypeTrainEndEvents');
        return await this._genericSubscribe(EventSubChannelHypeTrainEndSubscription, handler, this, userId);
    }
    /**
     * Subscribes to events that represent a Bits transaction in an extension.
     *
     * @param clientId The Client ID of the extension for which to get notifications for about Bits transactions.
     * @param handler  The function that will be called for any new notifications.
     */
    async subscribeToExtensionBitsTransactionCreateEvents(clientId, handler) {
        return await this._genericSubscribe(EventSubExtensionBitsTransactionCreateSubscription, handler, this, clientId);
    }
    /**
     * Subscribes to events that represent a user granting authorization to an application.
     *
     * @param clientId The Client ID for which to get notifications about authorization grants.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToUserAuthorizationGrantEvents(clientId, handler) {
        return await this._genericSubscribe(EventSubUserAuthorizationGrantSubscription, handler, this, clientId);
    }
    /**
     * Subscribes to events that represent a user revoking authorization from an application.
     *
     * @param clientId The Client ID for which to get notifications about authorization revocations.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToUserAuthorizationRevokeEvents(clientId, handler) {
        return await this._genericSubscribe(EventSubUserAuthorizationRevokeSubscription, handler, this, clientId);
    }
    /**
     * Subscribes to events that represent a user updating their account details.
     *
     * @param user The user for which to get notifications about account updates.
     * @param handler The function that will be called for any new notifications.
     */
    async subscribeToUserUpdateEvents(user, handler) {
        const userId = this._extractUserIdWithNumericWarning(user, 'subscribeToUserUpdateEvents');
        return await this._genericSubscribe(EventSubUserUpdateSubscription, handler, this, userId);
    }
    _getCorrectSubscriptionByTwitchId(id) {
        return this._subscriptionsByTwitchId.get(id);
    }
    async _genericSubscribe(clazz, handler, client, ...params) {
        const subscription = new clazz(handler, client, ...params);
        if (this._readyToSubscribe) {
            await subscription.start(this._findTwitchSubscriptionToContinue(subscription));
        }
        this._subscriptions.set(subscription.id, subscription);
        return subscription;
    }
    _extractUserIdWithNumericWarning(user, methodName) {
        const userId = extractUserId(user);
        if (!numberRegex.test(userId)) {
            this._logger.warn(`${methodName}: The given user is a non-numeric string. You might be sending a user name instead of a user ID.`);
        }
        return userId;
    }
};
__decorate([
    Enumerable(false)
], EventSubBase.prototype, "_subscriptions", void 0);
__decorate([
    Enumerable(false)
], EventSubBase.prototype, "_subscriptionsByTwitchId", void 0);
__decorate([
    Enumerable(false)
], EventSubBase.prototype, "_twitchSubscriptions", void 0);
__decorate([
    Enumerable(false)
], EventSubBase.prototype, "_apiClient", void 0);
EventSubBase = __decorate([
    rtfm('eventsub-base', 'EventSubBase')
], EventSubBase);
export { EventSubBase };
