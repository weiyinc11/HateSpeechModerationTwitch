import type { ApiClient, HelixStream, HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
import { type EventSubStreamOnlineEventData, type EventSubStreamOnlineEventStreamType } from './EventSubStreamOnlineEvent.external';
/**
 * An EventSub event representing a stream going live.
 */
export declare class EventSubStreamOnlineEvent extends DataObject<EventSubStreamOnlineEventData> {
    private readonly _client;
    /** @private */
    constructor(data: EventSubStreamOnlineEventData, client: ApiClient);
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Retrieves more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * Retrieves more information about the stream.
     */
    getStream(): Promise<HelixStream>;
    /**
     * The ID of the stream going live.
     */
    get id(): string;
    /**
     * The type of the stream going live.
     *
     * @deprecated Use {@link EventSubStreamOnlineEvent#type} instead.
     */
    get streamType(): EventSubStreamOnlineEventStreamType;
    /**
     * The type of the stream going live.
     */
    get type(): EventSubStreamOnlineEventStreamType;
    /**
     * The date and time when the stream was started.
     */
    get startDate(): Date;
}
//# sourceMappingURL=EventSubStreamOnlineEvent.d.ts.map