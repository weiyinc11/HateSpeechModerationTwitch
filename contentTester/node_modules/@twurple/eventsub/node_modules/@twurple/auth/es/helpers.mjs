import { callTwitchApi, HttpStatusCodeError } from '@twurple/api-call';
import { InvalidTokenError } from "./errors/InvalidTokenError.mjs";
import { createExchangeCodeQuery, createGetAppTokenQuery, createRefreshTokenQuery, createRevokeTokenQuery } from "./helpers.external.mjs";
import { TokenInfo } from "./TokenInfo.mjs";
/** @private */
function createAccessTokenFromData(data) {
    var _a, _b;
    return {
        accessToken: data.access_token,
        refreshToken: data.refresh_token || null,
        scope: (_a = data.scope) !== null && _a !== void 0 ? _a : [],
        expiresIn: (_b = data.expires_in) !== null && _b !== void 0 ? _b : null,
        obtainmentTimestamp: Date.now()
    };
}
/**
 * Retrieves an access token with your client credentials and an authorization code.
 *
 * @param clientId The client ID of your application.
 * @param clientSecret The client secret of your application.
 * @param code The authorization code.
 * @param redirectUri The redirect URI.
 *
 * This serves no real purpose here, but must still match one of the redirect URIs you configured in the Twitch Developer dashboard.
 */
export async function exchangeCode(clientId, clientSecret, code, redirectUri) {
    return createAccessTokenFromData(await callTwitchApi({
        type: 'auth',
        url: 'token',
        method: 'POST',
        query: createExchangeCodeQuery(clientId, clientSecret, code, redirectUri)
    }));
}
/**
 * Retrieves an app access token with your client credentials.
 *
 * @param clientId The client ID of your application.
 * @param clientSecret The client secret of your application.
 */
export async function getAppToken(clientId, clientSecret) {
    return createAccessTokenFromData(await callTwitchApi({
        type: 'auth',
        url: 'token',
        method: 'POST',
        query: createGetAppTokenQuery(clientId, clientSecret)
    }));
}
/**
 * Refreshes an expired access token with your client credentials and the refresh token that was given by the initial authentication.
 *
 * @param clientId The client ID of your application.
 * @param clientSecret The client secret of your application.
 * @param refreshToken The refresh token.
 */
export async function refreshUserToken(clientId, clientSecret, refreshToken) {
    return createAccessTokenFromData(await callTwitchApi({
        type: 'auth',
        url: 'token',
        method: 'POST',
        query: createRefreshTokenQuery(clientId, clientSecret, refreshToken)
    }));
}
/**
 * Revokes an access token.
 *
 * @param clientId The client ID of your application.
 * @param accessToken The access token.
 */
export async function revokeToken(clientId, accessToken) {
    await callTwitchApi({
        type: 'auth',
        url: 'revoke',
        method: 'POST',
        query: createRevokeTokenQuery(clientId, accessToken)
    });
}
/**
 * Retrieves information about an access token.
 *
 * @param accessToken The access token to get the information of.
 * @param clientId The client ID of your application.
 *
 * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
 */
export async function getTokenInfo(accessToken, clientId) {
    try {
        const data = await callTwitchApi({ type: 'auth', url: 'validate' }, clientId, accessToken);
        return new TokenInfo(data);
    }
    catch (e) {
        if (e instanceof HttpStatusCodeError && e.statusCode === 401) {
            throw new InvalidTokenError({ cause: e });
        }
        throw e;
    }
}
/** @private */
export async function getValidTokenFromProvider(provider, scopes, logger) {
    let lastTokenError = null;
    try {
        const accessToken = await provider.getAccessToken(scopes);
        if (accessToken) {
            // check validity
            const tokenInfo = await getTokenInfo(accessToken.accessToken);
            return { accessToken, tokenInfo };
        }
    }
    catch (e) {
        if (e instanceof InvalidTokenError) {
            lastTokenError = e;
        }
        else {
            logger === null || logger === void 0 ? void 0 : logger.error(`Retrieving an access token failed: ${e.message}`);
        }
    }
    logger === null || logger === void 0 ? void 0 : logger.warn('No valid token available; trying to refresh');
    if (provider.refresh) {
        try {
            const newToken = await provider.refresh();
            if (newToken) {
                // check validity
                const tokenInfo = await getTokenInfo(newToken.accessToken);
                return { accessToken: newToken, tokenInfo };
            }
        }
        catch (e) {
            if (e instanceof InvalidTokenError) {
                lastTokenError = e;
            }
            else {
                logger === null || logger === void 0 ? void 0 : logger.error(`Refreshing the access token failed: ${e.message}`);
            }
        }
    }
    throw lastTokenError !== null && lastTokenError !== void 0 ? lastTokenError : new Error('Could not retrieve a valid token');
}
const scopeEquivalencies = new Map([
    ['channel_commercial', ['channel:edit:commercial']],
    ['channel_editor', ['channel:manage:broadcast']],
    ['channel_read', ['channel:read:stream_key']],
    ['channel_subscriptions', ['channel:read:subscriptions']],
    ['user_blocks_read', ['user:read:blocked_users']],
    ['user_blocks_edit', ['user:manage:blocked_users']],
    ['user_follows_edit', ['user:edit:follows']],
    ['user_read', ['user:read:email']],
    ['user_subscriptions', ['user:read:subscriptions']],
    ['user:edit:broadcast', ['channel:manage:broadcast', 'channel:manage:extensions']]
]);
/**
 * Compares scopes for a non-upgradable `AuthProvider` instance.
 *
 * @param scopesToCompare The scopes to compare against.
 * @param requestedScopes The scopes you requested.
 */
export function compareScopes(scopesToCompare, requestedScopes) {
    if (requestedScopes !== undefined) {
        const scopes = new Set(scopesToCompare.flatMap(scope => { var _a; return [scope, ...((_a = scopeEquivalencies.get(scope)) !== null && _a !== void 0 ? _a : [])]; }));
        if (requestedScopes.some(scope => !scopes.has(scope))) {
            throw new Error(`This token does not have the requested scopes (${requestedScopes.join(', ')}) and can not be upgraded.
If you need dynamically upgrading scopes, please implement the AuthProvider interface accordingly:

\thttps://twurple.js.org/reference/auth/interfaces/AuthProvider.html`);
        }
    }
}
/**
 * Compares scopes for a non-upgradable `AuthProvider` instance, loading them from the token if necessary.
 *
 * @param clientId The client ID of your application.
 * @param token The access token.
 * @param loadedScopes The scopes that were already loaded.
 * @param requestedScopes The scopes you requested.
 */
export async function loadAndCompareScopes(clientId, token, loadedScopes, requestedScopes) {
    if (requestedScopes === null || requestedScopes === void 0 ? void 0 : requestedScopes.length) {
        const scopesToCompare = loadedScopes !== null && loadedScopes !== void 0 ? loadedScopes : (await getTokenInfo(token, clientId)).scopes;
        compareScopes(scopesToCompare, requestedScopes);
        return scopesToCompare;
    }
    return loadedScopes;
}
