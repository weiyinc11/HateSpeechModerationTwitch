import { __awaiter, __generator } from "tslib";
var PartitionedRateLimiter = /** @class */ (function () {
    function PartitionedRateLimiter(options) {
        this._children = new Map();
        this._partitionKeyCallback = options.getPartitionKey;
        this._createChildCallback = options.createChild;
    }
    PartitionedRateLimiter.prototype.request = function (req, options) {
        return __awaiter(this, void 0, Promise, function () {
            var partitionKey, partitionChild;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        partitionKey = this._partitionKeyCallback(req);
                        partitionChild = this._getChild(partitionKey);
                        return [4 /*yield*/, partitionChild.request(req, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PartitionedRateLimiter.prototype._getChild = function (partitionKey) {
        if (this._children.has(partitionKey)) {
            return this._children.get(partitionKey);
        }
        var result = this._createChildCallback(partitionKey);
        this._children.set(partitionKey, result);
        return result;
    };
    return PartitionedRateLimiter;
}());
export { PartitionedRateLimiter };
//# sourceMappingURL=PartitionedRateLimiter.mjs.map